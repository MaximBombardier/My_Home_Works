#pragma once// Заголовочный файл, где записаны прототипы методов класса, а также сам класс
class Massive//название класса
{
private:// поле с которым можно работать только с помощью методов данного класса (то есть все методы этого класса могут напрямую работать с этими переменными), вне этого класса эти переменные недоступны!!!
	double * Massive_First;// указатель на дробный динамический одномерный массив
	int SIZE;// целочисленная переменная отвечающая за размер (в нашем классе за размер массива)
	int Begin_SIZE;// целочисленная переменная отвечающая за элемент массива от которого будет начинаться итерация в цикле (заполнения случайными числами массива)
public:
	Massive() ;// конструктор по умолчанию (прототип!!!)
	Massive(int SIZE);//конструктор который принимает один аргумент (размер массива) и инициализирует свой массив нулями (прототип!!!)
	Massive(double * Massive_New, int SIZE_);//конструктор который принимает массив от пользователя, также принимает размер массива (в нашем случае пользовательского), создает внутри себя свой массив и копирует туда данные из массива полученного от пользователя! (прототип!!!)

	void Enter_SIZE();// прототип метода который позволяет вводить размер массива (в нашей программе он также инициализирует нулями измененный в размере массив)
	void Re_Size();// прототип метода который позволяет изменять размер массива на больший размер
	void Copy_Massive1(const double* begin, int size_);//прототип метода который копирует данные из одного массива в другой
	void Generate_Random_Number();//прототип метода который заполняет массив случайными числами от начала до конца
	void Generate_Random_Number_End();// прототип метода который заполняет случайными числами от какого-либо элемента в середине массива и до конца
	

	void View()const;// прототип метода который выводит информацию о массиве на экран
	double Get_Massive_First(int SIZE_, double value);//прототип метода (гетер) возращает значение конкретного элемента массива 
	void Set_Massive_First(int SIZE_, double value);// прототип метода (сетер) принимает номер определенного элемента в массиве и меняет его значение
	
	const double* begin()const { return Massive_First; }//прототип метода который указывает на начальный элемент массива (изменять значение поля метода нельзя!)
	double* begin() { return Massive_First; }// прототип метода который указывает на начальный элемент массива
	int length()const { return SIZE; }// протоип метода который определяет размер
	
	
	~Massive();// прототип деструктора (сам по себе деструктор удаляет только объекты созданные пользователем, а динамическую память выделенную под массивы нужно прописывать отдельно в деструкторе!)
};

