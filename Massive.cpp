#include <iostream>//файл в котором мы реализуем методы нашего класса (тоесть пишем что будут делать наши методы )
#include "Massive.h"	// включаем сюда наш заголовочный файл
using namespace std;

Massive::Massive() : SIZE(0)// конструктор по умолчанию 
{
	
};


Massive::Massive(int SIZE_):SIZE(SIZE_)//конструктор который принимает один аргумент и инициализирует себя нулями
{
	Massive_First = new double[SIZE];//создаем массив
	for (int i = 0; i < SIZE; i++)//инициализирем его нулями
	{
		Massive_First[i] = 0;
	}
}
Massive::Massive(double * User_Massive_, int SIZE_)//конструктор который принимает пользовательский массив с размером
{
	SIZE = SIZE_;//присваиваем значение принимаемого размера нашей переменной в классе
	Massive_First = new double[SIZE];		//создаем массив
	Copy_Massive1(User_Massive_, SIZE_);// используем метод копирования (копируем данные из пользовательского массива в массив класса)
	
}

void Massive::Enter_SIZE()// метод для ввода значения массива (размера массива)
{

	cout << " Введите размер массива : \t";
	cin >> SIZE;// переменная внутриклассовая отвечающая за размер массива
	cout << endl;
	Massive_First = new double[SIZE];//создаем массив (нужно для конструктора по умолчанию, т.к. у него ноль элементов изначально, а также для конструктора который инициализирует себя нулями)
	Begin_SIZE = SIZE;//присваиваем значения размера массива переменной Begin_SIZE (нужно для метода генерации случайных чисел void Massive::Generate_Random_Number_End()) на стр 76
	for (int i = 0; i < SIZE; i++)// для конструктора который инициализирует себя нулями
	{
		Massive_First[i] = 0;
	}
}


void Massive::Re_Size()// метод для изменения размера массива
{
	
	cout << " Введите новый размер массива : \t";
	cin >> SIZE;// вводим размер массива на который мы хотим изменить наш старый массив 
	cout << endl;
	
	double* temp = new double[SIZE];// создаем новый массив того размера который мы ввели
	for (int i = 0; i < length(); i++)
		temp[i] = Massive_First[i];// копируем данные из нашего старого массива в новый
	delete[]Massive_First;// удаляем наш старый массив (освобождаем память)
	Massive_First = new double[SIZE ];//создаем опять массив класса (из которого мы копировали данные) для того чтобы наши методы смогли с ним дальше работать, т.к. в методах прописан именно массив  Massive_First
	Copy_Massive1(temp, SIZE);// при помощи метода копирования мы копируем данные из нашего нового массива в массив Massive_First (чтобы мы смогли в дальнейшем с ним работать в наших методах)
	delete[]temp;// после копирования данных мы удвляем наш массив из которого мы копировали данные

}

void Massive::Copy_Massive1(const double* begin, int size_)// метод копирования копирует один массив в другой (поэлементно)
{
	for (int i = 0; i < size_; i++)
		Massive_First[i] = begin[i];

}


void Massive::Generate_Random_Number()//метод генерации случайных чисел от начала и до конца массива
{
	
	for (int i = 0; i < SIZE; i++)
	{
		Massive_First[i] = (rand() % 500 - 10) / 25.0;// заполнение каждого элемента массива дробными числами
	}
	
}
void Massive::Generate_Random_Number_End()//метод генерации случайных чисел от определенного элемента в серединемассива и до конца массива
{
	
	for (int i = Begin_SIZE; i < SIZE; i++)
	{
		Massive_First[i] = (rand() % 500 - 10) / 25.0;
	}

}


void Massive::View()const//метод для вывода информации о массиве на экран (поэлементно)
{

	for (int i = 0; i < SIZE; i++)
	{
		cout << Massive_First[i] << "\t";
		
	}
	cout << endl;
}
double Massive::Get_Massive_First(int SIZE_, double value)// метод (гетер), возвращающий значение определенного элемента в массиве
{
	for (int i = 0; i < SIZE; i++)
	{
		return Massive_First[SIZE_ - 1] = value;
	}
	
	
}
void Massive::Set_Massive_First(int SIZE_, double value)//метод (сетер) изменяющий значение элемента в массиве на другое значение ( пользователь сам выбирает номер элемента и его значение)
{
	
	while (SIZE_<0 || SIZE_>SIZE)
	{
		cout << " Введите корректно номер элемента в массиве !!! "<<endl;
		cout << " Введите номер элемента который хотите заменить : \t";
		cin >> SIZE_;
	}

		for (int i = 0; i < SIZE; i++)
		{
			Massive_First[SIZE_ - 1] = value;//присваиваем конкретному элементу в массиве пользовательское значение
		}
	
}



Massive::~Massive()//деструктор (по умолчанию удаляет в конце программы все объекты класса), внутри деструктора удаляем динамический массив который мы создавали внутри класса
{
	delete[]Massive_First;
	cout << " Объект и динамический массив успешно удалены !!! " << endl << endl;
}