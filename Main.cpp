#include<iostream>// файл в котором создаются объекты нашего класса и применяются методы класса
#include <cstdlib>
#include <ctime>// для генерации случайных чисел
#include "Massive.h"//включает в этот файл наш заголовочный файл с прототипами методов и самим классом

const int SIZE_User_Massive = 10;// переменная отвечающая за размер пользовательского массива
using namespace std;

int main()
{
	setlocale(LC_ALL, "ru");// позволяет писать на русском языке
	srand(time(NULL));// для генерации случайных чисел
	double* User_Massive = new double[SIZE_User_Massive];//создаем пользовательский массив
	double value;//переменная для значения элемента в массиве
	int Iterator_Number;//переменная для номера элемента в массиве
	cout << "=====================================================================================================" << endl<<endl;
	cout << " ПРОГРАММА С ТРЕМЯ КОНСТРУКТОРАМИ: \n 1) Конструктор по умолчанию;  \n 2) Конструктор, позволяющий создавать массив произвольного размера и проинициализировать его нулями; \n 3) Конструктор, который создаёт массив и инициализирует его массивом, полученным от пользователя; \n\n -Класс должен содержать методы set, get, которые работают с конкретным элементом массива по индексу \n - Методы для ввода массива с клавиатуры и вывода на экран." << endl << endl << endl;
	cout << "=====================================================================================================" << endl;
	cout << endl << endl << endl;
	
	

	cout << " ПРИМЕР КОНСТРУКТОРА ПО УМОЛЧАНИЮ : " << endl << endl;
	Massive One;//создаем объект нашего класса (при создании объекта класса мы автоматически выбираем конструктор который будет работатьв нашем объекте (зависит от синтаксиса написания -- от количества принимаемых аргументов))
	One.Enter_SIZE();//вводим его размер
	cout << "=====================================================================================================" << endl;
	cout << "-----XXX Генерируем случайные дробные числа !!! XXX-----" << endl << endl;
	One.Generate_Random_Number();//заполняем его случайными числами от начала и до конца
	One.View();//выводим результат генерации чисел на экран
	cout << endl << endl;
	cout << "=====================================================================================================" << endl;
	cout << "-----XXX Изменяем размер динамического массива и дописываем в дополнительные элементы случайные числа !!! XXX-----" << endl << endl;
	One.Re_Size();//меняем размер массива
	One.Generate_Random_Number_End();//заполняем дополнительные элементы массива случайными числами
	One.View();//выводим результат запонения на экран
	cout << endl << endl;
	cout << "=====================================================================================================" << endl;
	cout << "-----XXX Изменяем данные в конкретном элементе динамического массива !!! XXX-----"<<endl<<endl;
	cout << " Введите номер элемента который хотите заменить : \t";
	cin >> Iterator_Number;//вводим номер элемента массива который мы хотим изменить
	cout << " Введите значение для выбранного элемента : \t";
	cin >> value;// вводим значение выбранного элемента в массиве на которое мы хотим заменить старое значение
	One.Set_Massive_First(Iterator_Number, value);//заменяем значение выбранного элемента
	cout << "=====================================================================================================" << endl;
	cout << "-----XXX Массив с измененными данными выводим на экран !!! XXX-----" << endl << endl;
	One.View();// результат замены выводим на экран
	cout << endl << endl;
	cout <<" Значение выбранного вами элемента = "<< One.Get_Massive_First(Iterator_Number, value)<<endl<<endl;//выводим на экран значение замененного элемента
	
	system("pause");//ставим паузу после первого блока (конструктора) программы чтобы консоль сразу не закрывалась!
	



	cout << endl << endl;
	cout << "*****************************************************************************************************" << endl << endl;
	cout << " ПРИМЕР КОНСТРУКТОРА ИНИЦИАЛИЗИРОВАННОГО НУЛЯМИ !!! : " << endl << endl;
	Massive Two(SIZE_User_Massive);// создаем второй объект 
	Two.View();
	cout << "=====================================================================================================" << endl;
	Two.Enter_SIZE();
	Two.View();
	cout << "=====================================================================================================" << endl;
	cout << "-----XXX Изменяем данные в конкретном элементе динамического массива !!! XXX-----" << endl << endl;
	cout << " Введите номер элемента который хотите заменить : \t";
	cin >> Iterator_Number;
	cout << " Введите значение для выбранного элемента : \t";
	cin >> value;
	Two.Set_Massive_First(Iterator_Number, value);
	cout << "=====================================================================================================" << endl;
	cout << "-----XXX Массив с измененными данными выводим на экран !!! XXX-----" << endl << endl;
	Two.View();
	cout << endl << endl;
	cout << " Значение выбранного вами элемента = " << Two.Get_Massive_First(Iterator_Number, value) << endl << endl;

	system("pause");

	


	cout << endl << endl;
	cout << "*****************************************************************************************************" << endl << endl;
	cout << " ПРИМЕР КОНСТРУКТОРА СОЗДАЮЩЕГО ДИНАМИЧЕСКИЙ МАССИВ И ИНИЦИАЛИЗИРУЮЩИЙ ЕГО ДИНАМИЧЕСКИМ МАССИВОМ ПОЛУЧЕННЫМ ОТ ПОЛЬЗОВАТЕЛЯ !!! : " << endl << endl;
	cout << "-----XXX Получаем массив от пользователя и инициализируем его случайными числами !!! XXX-----" << endl << endl;
	for (int i = 0; i < SIZE_User_Massive; i++)// заполняем пользовательский массив случайными числами
	{
		User_Massive[i] = (rand() % 500 - 10) / 25.0;
	}

	for (int i = 0; i < SIZE_User_Massive; i++)//выводим на экран пользовательский массив
	{
		cout << User_Massive[i] << "\t";

	}
	cout << endl;
	cout << "*****************************************************************************************************" << endl << endl;
	Massive Three(User_Massive,SIZE_User_Massive);//создаем третий объект 
	cout << "-----XXX Копируем данные из массива полученного от пользователя в массив созданный конструктором !!! : XXX-----"<<endl<<endl;
	Three.View();
	cout << "=====================================================================================================" << endl;
	delete[]User_Massive;//не забываем удалить пользователький массив!
	system("pause");
	return 0;

}